#!/usr/bin/env python3.10
# -*- coding: utf-8 -*-
"""
2023-12-25 Fil - Future code Yandex.Practicum
–ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±–æ—Ç-–∞–Ω–∫–µ—Ç–∞ –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—É—é —à–∫–∞–ª—É

@four_knightess_survey_bot
https://t.me/four_knightess_survey_bot
6707721562:AAG63YPyOrcw_LfcIh3x_NuInlSl1hY5cac
"""

from random import shuffle

from telebot import TeleBot
from telebot import types
from telebot.types import Message

from questions import questions

questions_max_score = {}
for test in questions:
    questions_max_score[test] = 0
    for t in questions[test]:
        questions_max_score[test] += max(list(t["a"].values()))
print(questions_max_score)

TOKEN = "6707721562:AAG63YPyOrcw_LfcIh3x_NuInlSl1hY5cac"
bot = TeleBot(TOKEN)

users = {}


def check_user(uid):
    if uid not in users:
        users[uid] = {
            'current_knightess': 'geography',
            'geography': {'score': 0, 'q_num': 0},
            'astronomy': {'score': 0, 'q_num': 0},
            'math': {'score': 0, 'q_num': 0},
            'literature': {'score': 0, 'q_num': 0},

        }
    print(users)


# –ü—É—Å—Ç–æ–µ –º–µ–Ω—é, –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –∞–Ω–∫–µ—Ç—ã.
hideKeyboard = types.ReplyKeyboardRemove()

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é, –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –∞–Ω–∫–µ—Ç—ã.
menu_main = {
    'geography': 'üåé –ì–µ–æ–≥—Ä–∞—Ñ–∏—è',
    'astronomy': 'üî≠ –ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è',
    'math': 'üî¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
    'literature': 'üìö –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
}
menu_result = {
    'result': 'üîÆ —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
}
menu_break = {
    'break': '‚ùå –ü—Ä–µ—Ä–≤–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ—Å—Ç'
}

FourKnightessOnlyKeyboard = types.ReplyKeyboardMarkup(
    row_width=4,
    resize_keyboard=True
)
FourKnightessOnlyKeyboard.add(* menu_main.values())

ResultOnlyKeyboard = types.ReplyKeyboardMarkup(
    row_width=1,
    resize_keyboard=True
)
ResultOnlyKeyboard.add(* menu_result.values())

FourKnightessKeyboard = types.ReplyKeyboardMarkup(
    row_width=5,
    resize_keyboard=True
)
FourKnightessKeyboard.add(* menu_main.values())
FourKnightessKeyboard.add(* menu_result.values())


@bot.message_handler(commands=['start'])
def handle_start(m: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –≤—ã–±–æ—Ä –∏–∑ 4 —Ç–µ—Å—Ç–æ–≤"""
    m.text = "/start"
    print("handle_start" + m.text)
    uid = str(m.from_user.id)
    check_user(uid)
    bot.send_message(
        m.from_user.id,
        "<b>–ì–æ–π –µ—Å–∏, –∫—Ä–∞—Å–Ω—ã–π –º–æ–ª–æ–¥–µ—Ü –∞–ª–∏ –∫—Ä–∞—Å–Ω–∞ –¥–µ–≤–∏—Ü–∞!\n"
        "–ò—Å—Ç–∏–Ω–Ω–æ –≥–æ–≤–æ—Ä—é —Ç–µ–±–µ: –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –Ω–∞—Å—Ç—É–ø–∞—é—Ç!</b>\n\n"
        "–ì—Ä—è–¥—É—Ç —á–µ—Ç—ã—Ä–µ –≤—Å–∞–¥–Ω–∏–∫–µ—Å—Å—ã –ê–Ω–∫–µ—Ç–Ω–æ–≥–æ –ê–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å–∞,\n"
        "üèáüèªüèáüèáüèáüèª\n"
        "–∏ –∏–º–µ–Ω–∞ –∏–º —Å—É—Ç—å –ì–µ–æ–≥—Ä–∞—Ñ–∏—è, –ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è, –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞. "
        "–û—Ç –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤—ã–¥–µ—Ä–∂–∞—Ç—å –ø–æ 10 —É–¥–∞—Ä–æ–≤.\n\n"
        "–ò –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Ç–µ–±–µ –±—É–¥–µ—Ç –≤ –∫–æ–Ω—Ü–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–π: <b>–ø–∞–∫–∏-–ø–∞–∫–∏ –∏–∂–µ "
        "—Ö–µ—Ä—É–≤–∏–º—ã</b> –∏–ª–∏ <b>–∫—Ä–∏—á–∞—Ç—å <i>–°–≤–æ–±–æ–¥–Ω–∞—è –∫–∞—Å—Å–∞</i> –¥–æ –ø–µ–Ω—Å–∏–∏</b>.\n\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ - –≤ —Å–ø—Ä–∞–≤–∫–µ /help",

        parse_mode="HTML",
        reply_markup=FourKnightessKeyboard
    )


@bot.message_handler(commands=['help'])
def handle_help(m: Message):
    """–ß—É—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"""
    print("handle_help" + m.text)
    bot.send_message(
        m.from_user.id,
        "–ü—Ä–æ–π–¥–∏ –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ —á–µ—Ç—ã—Ä–µ —Ç–µ—Å—Ç–∞, —É–∑–Ω–∞–π —Å–≤–æ—é —Å—É–¥—å–±—É.\n\n"
        "–ï—Å–ª–∏ –æ—Ç–≤–µ—á–∞–ª, –∫–∞–∫ –¥–∏—Ç—ë –Ω–µ—Ä–∞–∑—É–º–Ω–æ–µ, –∏ —É—Å—Ç—ã–¥–∏–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ "
        "–ø–æ–∑–æ—Ä–Ω—ã—Ö, —Ç–æ –∂–º–∏ /reload –∏ –≤—ã—Å—Ç—É–ø–∏ –ø–æ-–±–æ–≥–∞—Ç—ã—Ä—Å–∫–∏.\n\n"
        "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–∏ –∂–∏–≤—É—Ç —Ç—É—Ç: /result",

        parse_mode="HTML",
        reply_markup=FourKnightessKeyboard
    )


@bot.message_handler(commands=['reload'])
def handle_reload(m: Message):
    """–ß—É—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"""
    print("handle_reload" + m.text)
    uid = str(m.from_user.id)
    check_user(uid)
    users[uid] = {
        'current_knightess': 'geography',
        'geography': {'score': 0, 'q_num': 0},
        'astronomy': {'score': 0, 'q_num': 0},
        'math': {'score': 0, 'q_num': 0},
        'literature': {'score': 0, 'q_num': 0},
    }
    bot.send_message(
        m.from_user.id,
        "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —É–¥–∞–ª–∏–ª. –ü—Ä–æ–±—É–π —Å –Ω—É–ª—è!",

        parse_mode="HTML",
        reply_markup=FourKnightessKeyboard
    )


@bot.message_handler(
    content_types=["text"],
    func=lambda m: m.text in menu_result.values())
@bot.message_handler(commands=['result'])
def handle_result(m: Message):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤"""
    print("handle_result" + m.text)
    uid = str(m.from_user.id)
    check_user(uid)
    user = users[uid]
    mtext = f"<b>–®–¢–û–®, –≤–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n\n"
    all_done = True
    result = {}
    rw = {
        'geography': ['–ê–Ω—Ç–∏–≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π', '–Ω–µ–≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π',
                      '–≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π', '–≥–µ–æ–≥—Ä–∞—Ñ', ],
        'astronomy': ['–ê–Ω—Ç–∏–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π', '–Ω–µ–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π',
                      '–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π', '–∞—Å—Ç—Ä–æ–Ω–æ–º', ],
        'math': ['–ê–Ω—Ç–∏–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π', '–Ω–µ–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π',
                      '–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π', '–º–∞—Ç–µ–º–∞—Ç–∏–∫', ],
        'literature': ['–ê–Ω—Ç–∏–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π', '–Ω–µ–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π',
                      '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π', '–ª–∏—Ç–µ—Ä–∞—Ç–æ—Ä', ],
    }
    result_words = []
    for test in menu_main:
        if user[test]['q_num'] < len(questions[test]):
            all_done = False
            break

    # all_done = True
    if not all_done:
        for test in menu_main:
            if user[test]['q_num'] < len(questions[test]):
                mtext += f"{menu_main[test]}: –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω /{test}\n\n"
                all_done = False
            else:
                mtext += f"{menu_main[test]}: {user[test]['score']}\n\n"
        mres = "\n–ü–û–õ–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç <b>–ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —á–µ—Ç—ã—Ä—ë—Ö —Ç–µ—Å—Ç–æ–≤</b>!"
    else:
        for test in menu_main:
            result[test] = (
                int(100 * user[test]['score'] / questions_max_score[test]))
            user[test]['score_int'] = result[test]
            mtext += (f"{menu_main[test]}: <b>{user[test]['score']} –∏–∑ "
                      f"{questions_max_score[test]}</b> "
                      f"({result[test]}%)\n\n")
        for i in range(4):
            for test in menu_main:
                if user[test]['score_int'] == min(result.values()):
                    result_words.append(rw[test][i])
                    result[test] = 102
                    user[test]['score_int'] = 102
                    break

        mres = (f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ü–æ –∏—Ç–æ–≥–∞–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—ã ‚Äî\n\n"
                f"<b>{' '.join(result_words).upper()}</b>!\n")

    bot.send_message(
        m.from_user.id,
        mtext + mres + "\n–•–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –≤—Å—ë –∑–∞–Ω–æ–≤–æ? –ñ–º–∏ /reload",

        parse_mode="HTML",
        reply_markup=FourKnightessKeyboard
    )


@bot.message_handler(
    content_types=["text"],
    func=lambda m: m.text in menu_main.values())
@bot.message_handler(commands=list(menu_main.keys()))
def handle_anketa(m: Message):
    """–ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É"""
    print("handle_anketa" + m.text)
    if (m.text not in menu_main.values()
            and m.text[1:] not in list(menu_main.keys())):
        bot.register_next_step_handler(m, handle_anketa)
        bot.send_message(
            m.from_user.id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç!",

            parse_mode="HTML",
            reply_markup= FourKnightessOnlyKeyboard
        )
        return

    uid = str(m.from_user.id)
    check_user(uid)
    knightess = [k for k, v in menu_main.items() if v == m.text]
    if not knightess:
        knightess = m.text.replace("/", "")
    else:
        knightess = knightess[0]
    # print(knightess)
    users[uid]["current_knightess"] = knightess
    bot.send_message(
        m.chat.id,
        f"<b>{menu_main[knightess].upper()}</b>",

        parse_mode="HTML",
        reply_markup=hideKeyboard
    )
    anketa(m)


def anketa(m):
    """uid —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ users, –Ω–æ –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è"""
    print("anketa" + m.text)
    uid = str(m.from_user.id)
    check_user(uid)
    # print(uid)
    user = users[uid]
    knightess = user['current_knightess']

    if m.text == list(menu_break.values())[0]:
        user[knightess]["q_num"] -= 1
        bot.register_next_step_handler(m, handle_result)
        bot.send_message(
            m.from_user.id,
            f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ. –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ.",

            parse_mode="HTML",
            reply_markup= ResultOnlyKeyboard
        )
        return

    q = user[knightess]["q_num"]
    quest = questions[knightess]
    # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å, –∑–Ω–∞—á–∏—Ç —É–∂–µ –ø—Ä–∏—à—ë–ª –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π
    if 0 < q <= len(quest):
        try:
            user[knightess]["score"] += quest[q - 1]["a"][m.text]
        except KeyError:
            user[knightess]["score"] -= quest[q - 1]["penalty"]

    # –í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
    if q >= len(quest):
        anketa_finish(m)
        return

    # –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã –≤ –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è
    bot.register_next_step_handler(m, anketa)

    markup_answers = types.ReplyKeyboardMarkup(
        row_width=len(quest[q]["a"]),
        resize_keyboard=True
    )
    a = list(map(str, quest[q]["a"].keys()))
    shuffle(a)
    markup_answers.add(* a)
    markup_answers.add(* menu_break.values())

    bot.send_message(
        m.from_user.id,
        f"–í–æ–ø—Ä–æ—Å ‚Ññ{q + 1}:\n"
        f"{quest[q]['q']}",

        parse_mode="HTML",
        reply_markup=markup_answers
    )
    user[knightess]["q_num"] += 1


def anketa_finish(m):
    print("anketa_finish" + m.text)
    uid = str(m.from_user.id)
    check_user(uid)
    # print(uid)
    user = users[uid]
    knightess = user['current_knightess']
    bot.send_message(
        m.from_user.id,
        f"üèÜ –ù–µ–ø–ª–æ—Ö–æ, –Ω–µ–ø–ª–æ—Ö–æ!\n"
        f"–°—á—ë—Ç –≤ —ç—Ç–æ–º —Ç–µ—Å—Ç–µ: <b>{user[knightess]['score']}</b>\n\n"
        f"–ù–∞—Å–∫–æ–ª—å–∫–æ –Ω–µ–ø–ª–æ—Ö–æ - —É–∑–Ω–∞–µ—à—å –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤.",

        parse_mode="HTML",
        reply_markup=FourKnightessKeyboard
    )


@bot.message_handler(
    func=lambda message: True,
    content_types=[
        'audio', 'photo', 'voice', 'video', 'document',
        'text', 'location', 'contact', 'sticker'])
def handle_error(m: Message):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –æ—à–∏–±–æ—á–Ω—ã—Ö """
    bot.send_message(m.chat.id, '–ù–∞–ø–∏—à–∏ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∫–µ—Ç—ã')


print(TOKEN)
bot.polling()
